// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               =  env("DATABASE_URL") // env("DATABASE_URL")
    // directUrl         = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                 String    @id @default(cuid())
    userId              String    @map("user_id")
    type                 String?
    provider           String
    providerAccountId  String    @map("provider_account_id")
    token_type         String?
    refresh_token      String?   @db.Text
    access_token       String?   @db.Text
    expires_at         Int?
    scope              String?
    id_token           String? @db.Text
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    userId       String?  @map("user_id")
    sessionToken String   @db.Text @map("session_token") @unique
    accessToken  String?  @db.Text @map("access_token")
    expires      DateTime
    user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("sessions")
}
model User {
    id                    String     @id @default(uuid())
    name                  String
    email                 String?    @unique @db.VarChar(255)
    emailVerified         DateTime?   @map("email_verified")
    image                 String?
    createdAt             DateTime   @default(now())
    updatedAt             DateTime   @updatedAt
    accounts              Account[]
    sessions              Session[]
    chatSessions  ChatSession[]
    picture       String? 
    stripeCustomerId String? @unique
    dateExpires   DateTime? @default(now())
    dateCreated   DateTime  @default(now())
    dateSubscribed DateTime? 
    isSubscribed Boolean @default(false)

    isSoftDeleted Boolean @default(false)
    isAdministrator Boolean @default(false)
    @@map("users")
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}


model ChatSession {
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    personId String @default("Kali")
    messages Message[]
    dateCreated DateTime @default(now())
    dateUpdated DateTime @updatedAt
    isHidden Boolean @default(false)
}

model Message {
    id String @id @default(cuid())
    chatSessionId String
    chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
    text String @db.Text
    dateCreated DateTime @default(now())
    sender String @default("/user")
}
