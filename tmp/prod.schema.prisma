// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    // provider = "sqlite"
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               =  env("DIRECT_URL") // env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    chatSessions  ChatSession[]
    picture       String? 
    stripeCustomerId String? @unique
    dateExpires   DateTime? @default(now())
    dateCreated   DateTime  @default(now())
    dateSubscribed DateTime? 
    isSubscribed Boolean @default(false)

    isSoftDeleted Boolean @default(false)
    isAdministrator Boolean @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model ChatSession {
    id String @id @default(cuid())
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    personId String @default("Kali")
    messages Message[]
    dateCreated DateTime @default(now())
    dateUpdated DateTime @updatedAt
    isHidden Boolean @default(false)

    @@unique([userId])
}

model Message {
    id String @id @default(cuid())
    chatSessionId String
    chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
    text String
    dateCreated DateTime @default(now())
    sender String @default("/user")
}
